/**
 * @module Input Component
 * @description
 * An input html element wrapped in formatted div.
 * Can make use of the input container's styling to contain other elements by
 *  providing `children` content.
 */
import React from 'react';
import {
  arrayOf,
  bool,
  func,
  instanceOf,
  node,
  oneOfType,
  shape,
  string,
} from 'prop-types';

import {
  getClassNames,
  noOp
} from '../../tools/helpers';

import './input.scss';

/** Helper to render an input suffix element, if provided. */
const renderSuffix = (suffix) => suffix && <div className="input__suffix">{ suffix }</div>;

const renderErrors = (errorMsg) => errorMsg && <p className="input__error-msg">{ errorMsg }</p>;

const renderAutoGenerated = (generated) => generated
    && <p className="typo-form-title input__auto-generated">Auto Generated</p>;

/** If `children` are provided, render that instead of the default input. */
const renderInput = (children, inputRef, type, name, placeholder, value, onChange, suffix, readOnly, generated) => (children || (
<>
  <input
    ref={inputRef}
    type={type}
    name={name}
    placeholder={placeholder}
    defaultValue={value}
    onChange={onChange}
    readOnly={readOnly}
  />
  { renderAutoGenerated(generated) }
  { renderSuffix(suffix) }
</>
));

const Input = ({
  type,
  name,
  placeholder,
  value,
  suffix,
  inputRef,
  onChange,
  error,
  errorMsg,
  minimal,
  lighter,
  small,
  narrow,
  readOnly,
  extend,
  children,
  generated,
}) => (
  <div className={getClassNames('input', {
    error,
    minimal,
    lighter,
    'custom-content': children,
    small,
    'read-only': readOnly,
    narrow,
    extend,
  })}
  >
    <div className="input__input-wrapper">
      { renderInput(children, inputRef, type, name, placeholder, value, onChange, suffix, readOnly, generated) }
    </div>
    { renderErrors(errorMsg) }
  </div>
);

Input.defaultProps = {
  type: 'text',
  placeholder: '',
  error: false,
  errorMsg: null,
  minimal: false,
  lighter: false,
  small: false,
  narrow: false,
  readOnly: false,
  generated: false,
  extend: false,
  name: '',
  value: '',
  suffix: undefined,
  inputRef: undefined,
  onChange: noOp,
  children: undefined,
};

Input.propTypes = {
  type: string,
  name: string,
  placeholder: string,
  value: string,
  suffix: node,
  inputRef: oneOfType([
    func, // either a function
    shape({ // or an object shaped like this
      current: instanceOf(Element),
    }),
  ]),
  onChange: func,
  generated: bool,
  error: bool,
  errorMsg: string,
  minimal: bool,
  lighter: bool,
  small: bool,
  narrow: bool,
  readOnly: bool,
  extend: bool,
  children: oneOfType([arrayOf(node), node]),
};

export default Input;
